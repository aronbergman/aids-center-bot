module.exports = () => {
    require('dotenv').config()

    const helper = require('./helper')
    const answerBuilder = require('./answerBuilder')
    const adminAnswerBuilder = require('./adminAnswerBuilder')
    const statBuilder = require('./statBuilder')
    const fs = require('fs')
    const TelegramBot = require('node-telegram-bot-api');
    const bot = new TelegramBot(process.env.TELEGRAM_TOKEN_TEST, {
        polling: true,
    });

    helper.logStart()

    bot.onText(/\/start/, async msg => {
        const answer = await answerBuilder('0', '9999');
        const GET_CHAT = helper.getChatId(msg)

        await helper.setSendMessage(bot, answer, GET_CHAT)
        //    —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        await helper.checkSesion(msg.chat.id).then(async data => {
            data.userId ? helper.destroySession(msg.chat.id) : null
        })
    });


    bot.onText(/\/help/, async msg => {
        const answer = await answerBuilder('1');
        const GET_CHAT = helper.getChatId(msg)

        helper.setSendMessage(bot, answer, GET_CHAT)
    });


    bot.onText(/\/digest/, async msg => {
        const answer = await answerBuilder('2');
        const GET_CHAT = helper.getChatId(msg)

        helper.setSendMessage(bot, answer, GET_CHAT)
    });


    bot.onText(/\/contacts/, async msg => {
        const answer = await answerBuilder('3');
        const GET_CHAT = helper.getChatId(msg)

        helper.setSendMessage(bot, answer, GET_CHAT)
    });


    bot.onText(/\/fund/, async msg => {
        const answer = await answerBuilder('4');
        const GET_CHAT = helper.getChatId(msg)

        helper.setSendMessage(bot, answer, GET_CHAT)
    });


    bot.onText(/\/before/, async msg => {
        const answer = await answerBuilder('33');
        const GET_CHAT = helper.getChatId(msg)

        helper.setSendMessage(bot, answer, GET_CHAT)
    });


    bot.onText(/\/after/, async msg => {
        const answer = await answerBuilder('34');
        const GET_CHAT = helper.getChatId(msg)

        helper.setSendMessage(bot, answer, GET_CHAT)
    });

    bot.onText(/\/admin/, async msg => {

        const admins = [
            146341933, // aronbergman
            1201299758, // kirill
            101194540, // serge
        ];

        if (admins.indexOf( msg.from.id ) !== -1) {
            await helper.checkSesion(msg.chat.id).then(async data => {
                if (!data.userId) {
                    //    –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è—é –µ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
                    helper.createSession(msg.chat)
                }
                // –≤–µ—Ä–Ω—É—Ç—å –∞–¥–º–∏–Ω—É –º–µ–Ω—é
                const answer = await adminAnswerBuilder('0', '9999');
                const GET_CHAT = helper.getChatId(msg)
                helper.setSendMessage(bot, answer, GET_CHAT, false)
            })
        } else {
            bot.sendMessage(msg.chat.id, 'üîë –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å /start')
        }

        // –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª admin
        // —è –ø—Ä–æ–≤–µ—Ä–∏–ª, –µ—Å—Ç—å –ª–∏ –µ–≥–æ —á–∞—Ç –≤ –ë–î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π

        // –µ—Å–ª–∏ —á–∞—Ç–∞ –Ω—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π —è –ø—Ä–∏—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª—è
        // –≤ replay –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Ç–∞—é –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞—é —Å–µ—Å—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        // –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ.

        // —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
    });

    bot.on('callback_query', async query => {
        // –ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        const prevBtn = !!(query.data.indexOf('<') + 1)
        let setParentId = ''

        if (prevBtn) {
            setParentId = query.data.substring(0, query.data.length - 1)
        } else {
            setParentId = +query.data
        }

        await helper.checkSesion(query.from.id).then(async data => {
            if (data.userId) {
                // –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–¥–º–∏–Ω–∞
                const answer = await adminAnswerBuilder(setParentId)
                helper.updateMessage(bot, answer, query, false)

                if (query.data === '1') {

                    await statBuilder().then(async () => {

                        function formatDate(date) {
                            let d = new Date(date),
                                month = '' + (d.getMonth() + 1),
                                day = '' + d.getDate(),
                                year = d.getFullYear(),
                                heur = d.getHours(),
                                minutes = d.getMinutes();

                            if (month.length < 2)
                                month = '0' + month;
                            if (day.length < 2)
                                day = '0' + day;

                            return `(–≤—ã–≥—Ä—É–∑–∫–∞ ${day}.${month}.${year} –≤ ${heur}-${minutes})`
                        }

                        const fileInterval = setInterval(() => {

                            const nowData = formatDate(Date.now());
                            const file = 'filename.xlsx';

                            if (fs.existsSync(file)) {
                                bot.sendDocument(
                                    query.message.chat.id,
                                    fs.readFileSync(file),
                                    {},
                                    {
                                        filename: `aidscenter_bot ${nowData}.xlsx`,
                                        contentType: 'application/application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                                    }).then(() => {
                                    clearInterval(fileInterval);
                                    fs.existsSync(file) ? fs.unlinkSync(file) : null;
                                })
                            }

                        }, 1000);


                    })
                }

            } else {
                // –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const answer = await answerBuilder(setParentId)
                helper.updateMessage(bot, answer, query, !prevBtn)
            }
        })
    })


    bot.on('message', msg => {
        const text = msg.text;
        if (text && text.startsWith('/')) return;

        if (msg.chat.username === 'aronbergman') {

            if (msg.reply_to_message) {
                bot.sendMessage(msg.reply_to_message.text, msg.text)
            } else {
                bot.sendMessage(msg.chat.id, `${msg.chat.id === 146341933 ? msg.text : '‚ö†Ô∏è'}`)
            }

        } else {
            bot.sendMessage(146341933, `
${msg.from.is_bot ? 'ü§ñ' : 'üôãüèº‚Äç‚ôÇÔ∏è'} ${msg.from.first_name} ${msg.from.last_name} @${msg.from.username}
${msg.chat.id} ${msg.text}`, {
                parse_mode: "Markdown"
            }).then(bot.sendMessage(146341933, msg.chat.id))
        }
    });
}